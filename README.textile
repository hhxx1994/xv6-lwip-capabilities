
h1. Xv6 with Network

h2. Abstruct

This project will be the implementation of a network in xv6. Supported NIC will be NE2000. This implement referes to MINIX.

These source codes are licenced under the BSD license, which is the same as the licenses of xv6 and MINIX.

h2. Change Log

h3. 20110902

I can get the ethernet address (MAC address) of some known ports.

h3. 20110908

Executing "ethtest", I can see sent DHCP/BOOTP packets with 'tcpdump'. But I never see interrupts from NIC, so I will check the driver source.

h4. Environment:

* Ubuntu11.04(natty) on VirtualBox
* Bochs2.4.5

h4. Output of tcpdump:

<pre>
18:38:36.722627 IP 0.0.0.0.bootpc > 255.255.255.255.bootps: BOOTP/DHCP, Request from 52:54:00:12:34:56 (oui Unknown), length 253
18:38:36.723416 IP 10.0.2.2.bootps > 10.0.2.16.bootpc: BOOTP/DHCP, Reply, length 548
</pre>

h4. Note:

* The local DHCP server on VirtualBox is located at '10.0.2.2'.
* The MAC address '52:54:00:12:34:56' is the default address in QEMU, so I use it in BOCHS (see '.bochsrc').
* BOCHS output an IRQ conflict message but I ignore it now. 

h3. 20110915

I simply rewrite all files under "eth/" to 4 files and implement some TCP/IP protocol stack(Ethernet, IP, UDP, and DHCP), so interrupts occur and an IP address is got by DHCP in -both QEMU and- BOCHS. The IRQ number switches to 10 for IRQ conflicting in BOCHS. '.bochsrc' need to be changed about the ne2k setting.

h4. Note:

* The implement don't work by building in cygwin(Why...?).
** Building in linux(Ubuntu) work on qemu in both linux and cygwin.
* (APPEND) Interrupts don't occur in QEMU...

h4. ToDo:

* Continue to implement driver programs
* Implement TCP/IP protocol stack.
** Need IPC for passing packets to processes by port?

h3. 20110919

* QEMU interrupts problem is solved. In QEMU version 0.14 (after version 0.8?), the IRQ of NE2000 is 11 (but IRQ is conflicted again in BOCHS).
* I implement 'ioctl' system call.


h2. Original README

<pre>
xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also http://pdos.csail.mit.edu/6.828/2007/v6.html, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (bootother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people made contributions:
    Russ Cox (context switching, locking)
    Cliff Frey (MP)
    Xiao Yu (MP)
    Nickolai Zeldovich
    Austin Clements

In addition, we are grateful for the patches contributed by Greg
Price, Yandong Mao, and Hitoshi Mitake.

The code in the files that constitute xv6 is
Copyright 2006-2007 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

If you spot errors or have suggestions for improvement, please send
email to Frans Kaashoek and Robert Morris (kaashoek,rtm@csail.mit.edu). 

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run "make".
On non-x86 or non-ELF machines (like OS X, even on x86), you will
need to install a cross-compiler gcc suite capable of producing x86 ELF
binaries.  See http://pdos.csail.mit.edu/6.828/2007/tools.html.
Then run "make TOOLPREFIX=i386-jos-elf-".

To run xv6, you can use Bochs or QEMU, both PC simulators.
Bochs makes debugging easier, but QEMU is much faster. 
To run in Bochs, run "make bochs" and then type "c" at the bochs prompt.
To run in QEMU, run "make qemu".

To create a typeset version of the code, run "make xv6.pdf".  This
requires the "mpage" utility.  See http://www.mesa.nl/pub/mpage/.
</pre>

